"0","library(magrittr)"
"0",""
"0","# Exercise 1 --------------------------------------------------------------"
"0",""
"0","## Calibration"
"0","rho = 0.95"
"0","sig = 0.007"
"0",""
"0","N = 9        # Number of points (states)"
"0","m = 3        # Scaling parameter (I don't know why!)"
"0",""
"0","t = 10000"
"0",""
"0","## Grid and Transition matrix function of Tauchen's Method"
"0",""
"0","tauchen = function(N, sig, rho, m) {"
"0","  "
"0","  # Grid"
"0","  grid = rep(0, N)"
"0","  grid[1] = - m * sqrt(sig^2/(1-rho^2))"
"0","  grid[N] = + m * sqrt(sig^2/(1-rho^2))"
"0","  step = (grid[N] - grid[1]) / (N - 1)"
"0","  for (i in 2:(N-1)) {"
"0","    grid[i] = grid[i-1] + step"
"0","  }"
"0","  "
"0","  # Transition matrix"
"0","  if (N > 1) {"
"0","    step = grid[2] - grid[1]"
"0","    P = array(0, dim = c(N, N))"
"0","    for (j in 1:N) {"
"0","      for (k in 1:N) {"
"0","        if (k == 1) {"
"0","          P[j, k] = pnorm((grid[k] - rho * grid[j] + (step / 2)) / sig)"
"0","        }"
"0","        else if (k == N) {"
"0","          P[j, k] = 1 - pnorm((grid[k] - rho * grid[j] - (step / 2)) / sig)"
"0","        }"
"0","        else {"
"0","          P[j, k] = pnorm((grid[k] - rho * grid[j] + (step / 2)) / sig) - "
"0","            pnorm((grid[k] - rho * grid[j] - (step / 2)) / sig)"
"0","        }"
"0","      }"
"0","    }"
"0","  } else {"
"0","    P = 1"
"0","  }"
"0","  return(list(zgrid = round(grid, 4), P = round(P,4)))"
"0","}"
"0",""
"0","## Grid and Transition matrix (Tauchen's Method)"
"0","Tauchen95 = tauchen(N, sig, rho, m)"
"0","Tauchen95"
"1","$zgrid
"
"1","[1]"
"1"," -0.0673"
"1"," -0.0504"
"1"," -0.0336"
"1"," -0.0168"
"1","  0.0000"
"1","  0.0168"
"1","  0.0336"
"1","  0.0504"
"1","  0.0673"
"1","
"
"1","
"
"1","$P
"
"1","     "
"1","   [,1]"
"1","   [,2]"
"1","   [,3]"
"1","   [,4]"
"1","   [,5]"
"1","   [,6]"
"1","   [,7]"
"1","   [,8]"
"1","   [,9]"
"1","
 [1,]"
"1"," 0.7644"
"1"," 0.2347"
"1"," 0.0009"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1","
 [2,]"
"1"," 0.0592"
"1"," 0.7405"
"1"," 0.1997"
"1"," 0.0006"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1","
 [3,]"
"1"," 0.0001"
"1"," 0.0747"
"1"," 0.7569"
"1"," 0.1679"
"1"," 0.0004"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1","
 [4,]"
"1"," 0.0000"
"1"," 0.0001"
"1"," 0.0931"
"1"," 0.7669"
"1"," 0.1396"
"1"," 0.0002"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1","
 [5,]"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0002"
"1"," 0.1147"
"1"," 0.7702"
"1"," 0.1147"
"1"," 0.0002"
"1"," 0.0000"
"1"," 0.0000"
"1","
 [6,]"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0002"
"1"," 0.1396"
"1"," 0.7669"
"1"," 0.0931"
"1"," 0.0001"
"1"," 0.0000"
"1","
 [7,]"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0004"
"1"," 0.1679"
"1"," 0.7569"
"1"," 0.0747"
"1"," 0.0001"
"1","
 [8,]"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0006"
"1"," 0.1997"
"1"," 0.7405"
"1"," 0.0592"
"1","
 [9,]"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0000"
"1"," 0.0009"
"1"," 0.2347"
"1"," 0.7644"
"1","
"
"1","
"
